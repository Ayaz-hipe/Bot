import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ChatAction, ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import httpx


import os
from dotenv import load_dotenv, find_dotenv
# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv(find_dotenv())

# –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
bot = Bot(os.getenv("Token"))
api_key = (os.getenv("API_KEY"))

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
class SynonymStates(StatesGroup):
    waiting_for_english_word = State()
    waiting_for_german_word = State()


# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info"),
     InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
    [InlineKeyboardButton(text="üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–∏–Ω–æ–Ω–∏–º—ã", callback_data="english_synonyms"),
     InlineKeyboardButton(text="üá©üá™ –ù–µ–º–µ—Ü–∫–∏–µ —Å–∏–Ω–æ–Ω–∏–º—ã", callback_data="german_synonyms")],
    [InlineKeyboardButton(text="üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
])

async def start_command(message: types.Message):
    text = ("<b>–ü—Ä–∏–≤–µ—Ç! üëã</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <i>–±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–Ω–æ–Ω–∏–º–æ–≤</i> –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –∏ –Ω–µ–º–µ—Ü–∫–∏—Ö —Å–ª–æ–≤. üéâ‚ú®\n\n"
            "–í—ã–±–∏—Ä–∞–π—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–µ–∂–∏–º –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —É–¥–æ–±–Ω—ã–º –ø–æ–∏—Å–∫–æ–º —Å–∏–Ω–æ–Ω–∏–º–æ–≤! üöÄ")
    await message.reply(text, reply_markup=main_keyboard, parse_mode="HTML")
    await message.answer_sticker('CAACAgIAAxkBAAENiMRn1_yQnMnMiYP2VIEziJX1O95dpQAC-RYAArtSuUmHd6j9C5buuDYE')

@dp.message(Command("start"))
async def handle_start(message: Message):
    await start_command(message)


# –§—É–Ω–∫—Ü–∏—è, –æ—Ç–≤–µ—á–∞—é—â–∞—è –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_info(target):
    await target.answer(
        "üí° –≠—Ç–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ò–ú–û–ò–∏–§ –∫—É—Ä—Å–∞ ¬´–¶–∏—Ñ—Ä–æ–≤–æ–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫¬ª.\n\n"
        "üéØ –¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –∏ –Ω–µ–º–µ—Ü–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ —É—Å–∫–æ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–≤, —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.\n\n"
        "üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
        "1Ô∏è‚É£ –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å ‚úÖ\n"
        "2Ô∏è‚É£ –õ–µ–≥–∫–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üí°\n"
        "3Ô∏è‚É£ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ ‚è±Ô∏è\n\n"
        "üë®‚Äçüíª –°–æ–∑–¥–∞—Ç–µ–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n"
        "‚Ä¢ –°–∏–±–∏–µ–≤ –ê.–†., –≥—Ä. 04.3-104\n"
        "‚Ä¢ –ö–æ—Å—É—Ö–∏–Ω–∞ –í.–ê., –≥—Ä. 04.3-104\n"
        "‚Ä¢ –¢–∞—Ç–∞—Ä–∏–Ω—Ü–µ–≤–∞ –ê.–í., –≥—Ä. 04.3-104\n"
        "‚Ä¢ –ì–æ—Ä—é–Ω–æ–≤–∞ –ï.–ò., –≥—Ä. 04.3-107\n"
        "‚Ä¢ –ê—Ö–º–µ—Ç–æ–≤ –ê.–ê., –≥—Ä. 04.3-106\n"
        "‚Ä¢ –Æ—Å–æ–≤–∞ –Æ.–ú., –≥—Ä. 04.3-410"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
@dp.callback_query(F.data == "info")
async def info_callback(callback: CallbackQuery):
    await send_info(callback.message)
    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏.

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info
@dp.message(Command("info"))
async def info_command(message: Message):
    await send_info(message)




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é /help –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
async def send_help(target):
    await target.answer(
        "ü§î –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º?\n"
        "1Ô∏è‚É£ –í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–∏–Ω–æ–Ω–∏–º–æ–≤;\n"
        "2Ô∏è‚É£ –î–∞–ª–µ–µ –≤–∞—Å –ø–µ—Ä–µ–Ω–µ—Å—ë—Ç –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–æ–≤–∞, –≥–¥–µ –≤—ã –≤–≤–æ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ª–æ–≤–æ 'money';\n"
        "3Ô∏è‚É£ –ë–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –≤–∞—à–µ —Å–ª–æ–≤–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ API;\n"
        "4Ô∏è‚É£ –ó–∞—Ç–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ –≤–∏–¥–µ: *–°–∏–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è* –∏ *–°–ª–∞–±—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è*;\n"
        "5Ô∏è‚É£ –ü–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –æ–∂–∏–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø–æ–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /back.\n\n"
        "üìù –†–∞—Å–ø–∏—à–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–º–∞–Ω–¥:\n"
        "‚Ä¢ /info ‚Äì –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å–ø—Ä–∞–≤–∫—É –æ –ø—Ä–æ–µ–∫—Ç–µ: –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –±–æ—Ç–∞, –µ–≥–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å, —Ü–µ–ª—å —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª—è—Ö —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏.\n"
        "‚Ä¢ /help ‚Äì –æ–±—ä—è—Å–Ω—è–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç—ã (–ø–æ–¥—Å–∫–∞–∑–∫–∞ –≤ –≤–∏–¥–µ –ø—Ä–∏–º–µ—Ä–∞) –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã.\n"
        "‚Ä¢ /searcheng ‚Äì –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–∏–Ω–æ–Ω–∏–º–æ–≤.\n"
        "‚Ä¢ /searchdeutsch ‚Äì –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –Ω–µ–º–µ—Ü–∫–∏—Ö —Å–∏–Ω–æ–Ω–∏–º–æ–≤.\n"
        "‚Ä¢ /back ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º (–±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ–∂–∏–¥–∞–Ω–∏–µ);\n"
        "‚Ä¢ /support ‚Äì —Å–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º. ü§ñ"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–º–æ—â—å"
@dp.callback_query(F.data == "help")
async def help_callback(callback: CallbackQuery):
    await send_help(callback.message)
    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def help_command(message: Message):
    await send_help(message)




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /back ‚Äì –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–æ–≤–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ /start
@dp.message(Command("back"))
async def back_command(message: Message, state: FSMContext):
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞ —Å–∏–Ω–æ–Ω–∏–º–æ–≤. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
    await start_command(message)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start



# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞
async def request_english_word(target, state: FSMContext):
    await target.answer("–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–Ω–æ–Ω–∏–º–æ–≤:")
    await state.set_state(SynonymStates.waiting_for_english_word)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /searcheng
@dp.message(Command("searcheng"))
async def searcheng_command(message: Message, state: FSMContext):
    await request_english_word(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–∏–Ω–æ–Ω–∏–º—ã" - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
@dp.callback_query(F.data == "english_synonyms")
async def english_synonyms_callback(callback: CallbackQuery, state: FSMContext):
    await request_english_word(callback.message, state)
    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏



# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤–≤–æ–¥–∞ –Ω–µ–º–µ—Ü–∫–æ–≥–æ —Å–ª–æ–≤–∞
async def request_german_word(target, state: FSMContext):
    await target.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–º–µ—Ü–∫–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–Ω–æ–Ω–∏–º–æ–≤(—Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã):")
    await state.set_state(SynonymStates.waiting_for_german_word)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /searchdeutsch
@dp.message(Command("searchdeutsch"))
async def searchgerman_command(message: Message, state: FSMContext):
    await request_german_word(message, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–∏–Ω–æ–Ω–∏–º—ã" - –Ω–µ–º–µ—Ü–∫–∏–π
@dp.callback_query(F.data == "german_synonyms")
async def german_synonyms_callback(callback: CallbackQuery, state: FSMContext):
    await request_german_word(callback.message, state)
    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ (c —Ä–µ–∂–∏–º–æ–º –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ)
@dp.message(SynonymStates.waiting_for_english_word)
async def process_english_word(message: Message, state: FSMContext):
    word = message.text.strip().lower()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–æ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É, —Ç–æ –¥–∞–Ω–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –µ—ë –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
    if word.startswith("/"):
        return

     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    processing_message = await message.answer("–ë–æ—Ç –ø—Ä–∏–Ω—è–ª —Å–ª–æ–≤–æ –∏ –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ —Å–∏–Ω–æ–Ω–∏–º–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    strong_synonyms, weak_synonyms = await get_english_synonyms(word)
    if not strong_synonyms and not weak_synonyms:
        response = f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è —Å–ª–æ–≤–∞: {word}"
    else:
        response = ""
        if strong_synonyms:
            response += f"–°–∏–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {', '.join(strong_synonyms)}\n\n"
        if weak_synonyms:
            response += f"–°–ª–∞–±—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {', '.join(weak_synonyms)}"
    response += "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /back –¥–ª—è –≤—ã—Ö–æ–¥–∞."

    # –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    try:
        await processing_message.delete()
    except Exception:
        pass
# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(response)
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–µ–º–µ—Ü–∫–æ–≥–æ —Å–ª–æ–≤–∞ (—Å —Ä–µ–∂–∏–º–æ–º –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ)
@dp.message(SynonymStates.waiting_for_german_word)
async def process_german_word(message: Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –∞—Ä—Ç–∏–∫–ª—å, –µ—Å–ª–∏ —Å–ª–æ–≤–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–µ–≥–æ
    raw_text = message.text.strip().lower()
    tokens = raw_text.split()
    # –ù–∞–±–æ—Ä –Ω–µ–º–µ—Ü–∫–∏—Ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∞—Ä—Ç–∏–∫–ª–µ–π
    articles = {"der", "die", "das", "ein", "eine", "einen", "dem", "den"}
    if tokens and tokens[0] in articles:
        word = " ".join(tokens[1:]).strip()
    else:
        word = raw_text

    if not word or word.startswith("/"):
        return
# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    processing_message = await message.answer("–ë–æ—Ç –ø—Ä–∏–Ω—è–ª —Å–ª–æ–≤–æ –∏ –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ —Å–∏–Ω–æ–Ω–∏–º–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    strong_synonyms, weak_synonyms = await get_german_synonyms(word)
    if not strong_synonyms and not weak_synonyms:
        response = f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –¥–ª—è —Å–ª–æ–≤–∞: {word}\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã –∏–ª–∏ —Å—É—â. —Å –∞—Ä—Ç–∏–∫–ª–µ–º"
    else:
        response = ""
        if strong_synonyms:
            response += f"–°–∏–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {', '.join(strong_synonyms)}\n\n"
        if weak_synonyms:
            response += f"–°–ª–∞–±—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {', '.join(weak_synonyms)}"
    response += "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /back –¥–ª—è –≤—ã—Ö–æ–¥–∞."

    # –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    try:
        await processing_message.delete()
    except Exception:
        pass

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(response)
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤ —á–µ—Ä–µ–∑ Thesaurus API
async def get_english_synonyms(word: str):
    url = "https://api.apiverve.com/v1/thesaurus"
    headers = {"x-api-key": api_key}
    params = {"word": word}
    try:
        async with httpx.AsyncClient(timeout=httpx.Timeout(10.0)) as client:
            response = await client.get(url, headers=headers, params=params)
            data = response.json()
            if data.get("status") == "ok":
                synonyms = data.get("data", {}).get("similarWords", [])
            else:
                synonyms = []
    except httpx.ConnectTimeout:
        synonyms = []
    half = len(synonyms) // 2
    if half == 0:
        return (synonyms, [])
    return (synonyms[:half], synonyms[half:])


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–º–µ—Ü–∫–∏—Ö —Å–∏–Ω–æ–Ω–∏–º–æ–≤ —á–µ—Ä–µ–∑ OpenThesaurus API
async def get_german_synonyms(word: str):
    url = f"https://www.openthesaurus.de/synonyme/search?q={word}&format=application/json"
    try:
        async with httpx.AsyncClient(timeout=httpx.Timeout(10.0)) as client:
            response = await client.get(url)
            data = response.json()
            synonyms = []
            # OpenThesaurus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–±–æ—Ä—ã —Å–∏–Ω–æ–Ω–∏–º–æ–≤ –≤ –∫–ª—é—á–µ "synsets"
            for synset in data.get("synsets", []):
                # –ú–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞–±–æ—Ä –Ω–∞ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ –ø–æ–∑–∏—Ü–∏–∏
                terms = [term["term"] for term in synset.get("terms", [])]
                synonyms.extend(terms)
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–∞–º–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ (–µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
            synonyms = list(set(synonyms))
            if word in synonyms:
                synonyms.remove(word)
    except httpx.ConnectTimeout:
        synonyms = []
    # –î–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–µ–ª–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ–ø–æ–ª–∞–º
    half = len(synonyms) // 2
    if half == 0:
        return (synonyms, [])
    return (synonyms[:half], synonyms[half:])


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é /support –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
async def send_support(target):
    support_message = (
        "üí¨ –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, "
        "–ø–∏—à–∏—Ç–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç (id: @ayazsib) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∏—Å—å–º–æ –Ω–∞ –ø–æ—á—Ç—É üìß sibievayaz6@gmail.com"
    )
    await target.answer(support_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support
@dp.message(Command("support"))
async def support_command(message: Message):
    await send_support(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞"
@dp.callback_query(F.data == "support")
async def support_callback(callback: CallbackQuery):
    await send_support(callback.message)
    await callback.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ª—é–±–æ–µ —Ñ–æ—Ç–æ
@dp.message(F.photo)
async def handle_photo(message: Message):
    await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ñ–æ—Ç–æ! –ù–æ —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. /start")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /start –Ω–µ –≤–≤–µ–¥–µ–Ω–∞)
@dp.message()
async def start(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /start")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...") # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    await bot.delete_webhook(drop_pending_updates=True)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await dp.start_polling(bot)  # –ü–µ—Ä–µ–¥–∞—ë–º `bot` –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–ª–ª–∏–Ω–≥–∞

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"ERROR: {e}") # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
